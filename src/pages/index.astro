---
import Layout from "../layouts/Layout.astro";

import Hero from "../components/sections/hero/Hero.astro";
import About from "../components/sections/about/About.astro";
import LandPreviews from "../components/sections/land-previews/LandPreviews.astro";
---

<Layout title="Viet Land" currentPage="/">
  <Hero />
  <LandPreviews />
  <About />
</Layout>

<!-- Smooth scroll functionality - css classes requred by Lenis library -->
<style is:global>
  html.lenis {
    height: auto !important;
  }
  .lenis.lenis-smooth {
    scroll-behavior: auto !important;
  }
  .lenis.lenis-smooth [data-lenis-prevent] {
    overscroll-behavior: contain !important;
  }
  .lenis.lenis-stopped {
    overflow: hidden !important;
  }
  .lenis.lenis-scrolling iframe {
    pointer-events: none !important;
  }
</style>

<!-- Hide and show animations of navigation bar in header, triggered by scroll -->
<style is:global lang="sass">
  header[scroll-hide="true"]
    transform: translateY(-50px)
    opacity: 0
    transition: transform .6s ease, opacity .4s ease

  header[scroll-hide="false"]
    transform: translateY(0%)
    opacity: 1
    transition: transform .6s ease, opacity .4s .1s ease
</style>

<script>
  import LocomotiveScroll from "locomotive-scroll";
  import gsap from "gsap";
  import isMobileDevice from "../scripts/isMobileDevice.js";

  // Allow smooth scrolling only on desktop devices
  if (!isMobileDevice()) {
    // Callback control when to show and hide navigation bar in header
    let isHeaderVisible = true;
    const headerEl = document.querySelector("header") as HTMLElement;
    const onScroll = ({
      scroll,
      direction,
    }: {
      scroll: number;
      direction: number;
    }) => {
      if (isHeaderVisible && direction === 1 && scroll >= 201) {
        isHeaderVisible = false;

        headerEl.setAttribute("scroll-hide", "true");
      }

      if (!isHeaderVisible && direction === -1 && scroll <= 299) {
        isHeaderVisible = true;

        headerEl.setAttribute("scroll-hide", "false");
      }
    };

    // Initialize LocomotiveScroll library - smooth scrolling
    const mainContentContainer = document.querySelector(
      ".main-content"
    ) as HTMLElement;
    const locomotiveScroll = new LocomotiveScroll({
      lenisOptions: {
        wrapper: mainContentContainer, // Specify which element is scrollable
      },
      scrollCallback: onScroll, // Callback function on scroll event (currently used to show and hide navigation bar in header, but any logic is possible)
    });

    // Scroll down to land previews section on button click
    const buttonDownEl = document.getElementById("button-down") as HTMLElement;
    const landPreviewsEl = document.getElementById(
      "land-previews"
    ) as HTMLElement;
    buttonDownEl.addEventListener("click", () => {
      const deltaY =
        window.innerHeight - landPreviewsEl.getBoundingClientRect().top;

      locomotiveScroll.scrollTo(landPreviewsEl, {
        duration: 1.4 * (1 - deltaY / window.innerHeight),
        easing: (t) => {
          return 1 - Math.pow(1 - t, 4);
        },
      });
    });

    // Animations of land previews section
    const timelineLandPreviews = gsap.timeline({ paused: true });

    timelineLandPreviews.from("#land-previews-title", {
      y: -120,
      scale: 0.95,
      opacity: 0.65,
      ease: "linear",
    });

    timelineLandPreviews.from("#land-previews-description", {
      y: 10,
      scale: 0.95,
      opacity: 0,
      ease: "linear",
      delay: -0.1,
    });

    window.addEventListener("landPreviewsScrollProgressEvent", (e) => {
      const { target, progress } = (e as CustomEvent).detail;

      timelineLandPreviews.progress(progress);
    });

    // Animations of about section
    let gsTimelineAboutSection = gsap
      .timeline({
        paused: true,
        defaults: { ease: "linear" },
      })
      .from("#icon-1", {
        translateZ: 500,
        translateX: 250,
        duration: 0.6,
        opacity: 0,
      })
      .fromTo(
        "#item-1",
        { translateZ: 500, translateX: 250, opacity: 0 },
        {
          translateZ: 0,
          translateX: 0,
          duration: 0.6,
          opacity: 1,
        },
        "-=0.4"
      )
      .from(
        "#check-1",
        {
          scale: 0.3,
          opacity: 0,
          duration: 0.8,
          ease: "elastic.out(1, 0.3)",
        },
        "-=0.2"
      )
      .fromTo(
        "#border-overlay",
        { scaleX: 1, transformOrigin: "right" },
        {
          scaleX: 0.5,
          duration: 0.8,
          ease: "easeOutQuart",
          transformOrigin: "right",
        },
        "-=0.2"
      )
      .from(
        "#icon-2",
        {
          translateZ: 500,
          translateX: 0,
          duration: 0.6,
          opacity: 0,
        },
        "-=0.4"
      )
      .fromTo(
        "#item-2",
        { translateZ: 500, translateX: 250, opacity: 0 },
        {
          translateZ: 0,
          translateX: 0,
          duration: 0.6,
          opacity: 1,
        },
        "-=0.4"
      )
      .fromTo(
        "#check-2",
        {
          scale: 0.3,
          opacity: 0,
        },
        {
          scale: 1,
          opacity: 0.99,
          duration: 0.8,
          ease: "elastic.out(1, 0.3)",
        },
        "-=0.2"
      )
      .to(
        "#border-overlay",
        {
          scaleX: 0,
          duration: 0.6,
          ease: "easeOutQuart",
          transformOrigin: "right",
        },

        "-=0.2"
      )
      .from(
        "#icon-3",
        {
          translateZ: 500,
          translateX: 0,
          duration: 0.6,
          opacity: 0,
        },
        "-=0.4"
      )
      .fromTo(
        "#item-3",
        { translateZ: 500, translateX: 250, opacity: 0 },
        {
          translateZ: 0,
          translateX: 0,
          duration: 0.6,
          opacity: 1,
        },
        "-=0.4"
      )
      .from(
        "#check-3",
        {
          scale: 0.3,
          opacity: 0,
          duration: 0.8,
          ease: "elastic.out(1, 0.3)",
        },
        "-=0.2"
      );

    let gsTimelineAboutContainer = gsap
      .timeline({
        paused: true,
        defaults: { ease: "linear" },
        // markers: true,
      })
      .fromTo(
        "#about-container",
        {
          translateZ: 400,
          rotateZ: 0,
          rotateX: 0,
          rotateY: 0,
        },
        {
          translateZ: 0,
          duration: gsTimelineAboutSection.duration() + 1.2,
        }
      );

    // let isPlayingAnimation = false;
    // let isPlayingAnimation2 = false;
    window.addEventListener("aboutSectionScrollProgressEvent", (e) => {
      const { target, progress } = (e as CustomEvent).detail;
      console.log(
        `aboutSectionScrollProgressEvent: target: ${target}`,
        `progress: ${progress}`
      );

      gsTimelineAboutSection.progress(progress);
      gsTimelineAboutContainer.progress(progress);

      // tl.progress(progress);
      // timelineAboutSection.progress(progress);
      // if (progress >= 0.1 && !isPlayingAnimation) {
      //   gsTimelineAboutSection.play();
      //   isPlayingAnimation = true;

      //   gsTimelineAboutContainer.play();

      //   setTimeout(() => {
      //     // gsTimelineAboutSection.pause();
      //   }, 1200);
      // }

      // if (
      //   progress >= 0.6 &&
      //   !gsTimelineAboutSection.isActive() &&
      //   !isPlayingAnimation2
      // ) {
      //   gsTimelineAboutSection.play();
      //   isPlayingAnimation2 = true;

      //   setTimeout(() => {
      //     // gsTimelineAboutSection.pause();
      //   }, 200);
      // }

      // if (progress >= 0.7 && !gsTimelineAboutSection.isActive()) {
      //   gsTimelineAboutSection.play();
      // }
      // timelineAboutSection.play();
    });
  }
</script>
