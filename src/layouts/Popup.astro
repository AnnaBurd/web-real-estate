---
interface Props {
  id: string;
}

const { id } = Astro.props;
---

<pop-up
  id={id}
  class="fixed top-0 left-0 w-full h-full flex flex-col items-center justify-center px-10 md:px-16 lg:px-32 min-[1700px]:px-0 xl:mx-auto"
  open="false"
>
  <slot />
</pop-up>

<!-- Style popup open, closed states and transition -->
<style lang="sass" is:global>
  // Container with page content
  // Default (before animations)
  .main-content
    position: relative
    z-index: 5

  // Visible
  .main-content[hide="false"]
    animation: slideDownLarge .8s cubic-bezier(0.165, 0.840, 0.440, 1.000) forwards
    height: 100%

  // Moved over the top of the page
  .main-content[hide="true"]
    height: 100vh
    animation: slideUpLarge .8s cubic-bezier(0.165, 0.840, 0.440, 1.000) forwards

  // Popup container
  // Default (before animations)
  pop-up
    z-index: 0
    background-color: var(--color-secondary)

  // Visible
  pop-up[open="true"]
    // background-color: var(--color-secondary)
    // Modal within popup
    & > *
      animation: moveUp .8s cubic-bezier(0.165, 0.840, 0.440, 1.000) forwards

  // Hidden
  pop-up[open="false"]
    // Modal within popup
    & > *
      animation: moveDown .8s cubic-bezier(0.165, 0.840, 0.440, 1.000) forwards

  @keyframes slideUpLarge
    0%
      transform: translateY(0%)
    100%
      transform: translateY(-100%)

  @keyframes slideDownLarge
    0%
      transform: translateY(-100%)
    100%
      transform: translateY(0%)

  @keyframes moveUp
    0%
      transform: translateY(450px)
    100%
      transform: translateY(0)

  @keyframes moveDown
    0%
      transform: translateY(0px)
    100%
      transform: translateY(450px)
</style>

<!-- Handle popup opening and closing functionality (reusable web component) -->
<script>
  class PopUp extends HTMLElement {
    private isOpen: boolean = false;
    private parentEl: HTMLElement;

    constructor() {
      super();

      this.parentEl = document.querySelector(".main-content") as HTMLElement;

      /* Set up close listeners */
      // Close popup on overlay click
      this.addEventListener("click", (event) => {
        if (!this.isOpen) return;

        if (event.target === this) {
          this.hide();
        }
      });

      // Close popup on escape key press
      document.addEventListener("keydown", (event) => {
        if (!this.isOpen) return;

        if (event.key === "Escape") {
          this.hide();
        }
      });

      // Close popup on close button click
      this.querySelector(".close-button")?.addEventListener("click", () => {
        this.hide();
      });
    }

    private updateHtmlAttributes() {
      this.setAttribute("open", this.isOpen.toString());
      this.parentEl.setAttribute("hide", this.isOpen.toString());
    }

    // Public methods - can query pop-up element and call these methods from js / astro components
    hide() {
      if (!this.isOpen) return;

      this.isOpen = false;
      this.updateHtmlAttributes();
    }

    show() {
      if (this.isOpen) return;

      this.isOpen = true;
      this.updateHtmlAttributes();
    }
  }

  customElements.define("pop-up", PopUp);
</script>
