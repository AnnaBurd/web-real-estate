---
import type { Land } from "../../../../model/Land";
import Badge from "../../../ui/Badge.astro";

interface Props {
  land: Land;
  className?: string;
  attributes?: any;
}

const { land, className, attributes } = Astro.props;

// Prepare responsive image srcset and sizes
const imgUrl = land.images ? land.images[0].url : "/vectors/no_image.svg";
const apiQuery = "fm=jpg&fl=progressive&fit=fill";
const imgSizes = "(max-width: 1024px) 500px, 350px";

const imgSrc = `${imgUrl}?${apiQuery}&w=800&h=500`;
const imgSrcSet = `${imgUrl}?${apiQuery}&w=200&h=150 200w, ${imgUrl}?${apiQuery}&w=400&h=300 400w, ${imgUrl}?${apiQuery}&w=800&h=500 800w`;
---

<div
  {...attributes}
  class=` md:px-6 md:pb-10 xl:px-3 h-auto ${className ? className : ""} overflow-visible`
>
  <a
    href={`/${land.slug}`}
    class="bg-white rounded-md overflow-hidden flex flex-col h-full max-w-md mx-auto md:max-w-lg tabbable"
  >
    <div class="w-[120%] h-48 md:h-56 xl:h-64 portrait:md:h-80 relative">
      <img
        loading="lazy"
        alt={land.title}
        srcset={imgSrcSet}
        sizes={imgSizes}
        src={imgSrc}
        data-swiper-parallax="10"
        class="w-full h-full object-cover object-right -ml-[10%]"
      />
      {
        land.tag && (
          <Badge className="absolute bottom-0 left-0 mb-3.5 ml-4 xl:ml-6 xl:mb-5">
            {land.tag}
          </Badge>
        )
      }
    </div>
    <div
      class="py-4 px-4 xl:py-6 xl:px-6 w-full flex flex-col self-stretch flex-1 justify-between"
    >
      <div>
        <span
          class="text-base md:text-xl font-semibold tracking-tight leading-tight block"
          >{land.title}</span
        >
        <address class="text-xs md:text-sm font-normal not-italic opacity-80">
          {land.briefDescription || land.address}
        </address>
      </div>

      <span class="block mt-6" data-swiper-parallax="10">
        <span
          class="text-[--color-accent] text-base font-medium xl:font-normal xl:text-xl"
        >
          <span
            class="text-2xl md:text-3xl xl:text-4xl font-normal md:font-light tracking-tighter leading-tight"
            >{(land?.price || 0) / 1000000000}
          </span> tá»·
        </span>
        {
          land?.area && (
            <span class="opacity-90 tracking-tighter text-sm">
              <span class=" bg-[--color-text] w-[1px] h-5 xl:h-7 inline-block -mb-1 ml-1 mr-1.5 opacity-20" />
              {land.area.toLocaleString().replace(/,/g, " ")} m&sup2
            </span>
          )
        }
      </span>
    </div>
  </a>
</div>

<!-- Render card border if border attribute is set up to true -->
<style>
  div[border="true"] a {
    border: 1px solid var(--color-accent-lighter);
  }
</style>
