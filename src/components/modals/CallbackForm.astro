---
import PopupCloseBtn from "../../layouts/PopupCloseBtn.astro";
import ButtonDefault from "../ui/buttons/ButtonDefault.astro";
---

<section
  class="overflow-hidden rounded-md shadow-2xl md:grid md:grid-cols-3 bg-white max-w-2xl relative"
>
  <PopupCloseBtn />
  <img
    alt="Trainer"
    src="/vectors/mail.svg"
    class="h-32 w-full object-cover md:h-full"
  />

  <div class="p-4 text-center sm:p-6 md:col-span-2 lg:p-8">
    <h3
      class="text-base md:text-lg xl:text-2xl tracking-normal font-normal mb-1"
    >
      Liên hệ với chúng tôi
    </h3>
    <p class="text-xs font-normal opacity-80 tracking-wide leading-snug mb-4">
      Vui lòng để lại tin nhắn và chúng tôi sẽ gọi lại sớm <br /> trong vong 24 tieng.
      <p>
        <form
          name="callback-form"
          method="post"
          data-netlify="true"
          id="callback-form"
          class="space-y-3"
        >
          <div>
            <label class="sr-only" for="name">Tên</label>
            <input
              class="w-full rounded-md border-[#607cb344] py-2.5 px-3 text-sm focus:ring-2 focus:ring-offset-2 focus:ring-[#607cb3] focus:border-[#607cb344]"
              placeholder="Tên"
              type="text"
              id="name"
              autocomplete="name"
            />
          </div>

          <div>
            <label class="sr-only" for="phone">Số điện thoại</label>
            <input
              class="w-full rounded-md border-[#607cb344] py-2.5 px-3 text-sm focus:ring-2 focus:ring-offset-2 focus:ring-[#607cb3] focus:border-[#607cb344]"
              placeholder="Số điện thoại"
              type="tel"
              id="phone"
              autocomplete="tel"
            />
          </div>

          <div>
            <label class="sr-only" for="message">Thông tin</label>

            <textarea
              class="w-full rounded-md border-[#607cb344] py-2.5 px-3 text-sm focus:ring-2 focus:ring-offset-2 focus:ring-[#607cb3] focus:border-[#607cb344]"
              placeholder="Thông tin"
              rows="6"
              id="message"></textarea>
          </div>

          <div class="mt-4">
            <ButtonDefault type="submit" className="rounded-md px-5 py-3 ">
              Gửi thông tin
            </ButtonDefault>
          </div>
        </form>
      </p>
    </p>
  </div>
</section>

<!-- Callback form functionality - validate data and send to the netlify backend -->
<script>
  const callbackFormEl = document.getElementById(
    "callback-form"
  ) as HTMLFormElement;

  const successAlertEl = document.querySelector("#success-alert") as any;
  const errorAlertEl = document.querySelector("#error-alert") as any;

  const formContainerPopupEl = document.querySelector(
    "#callback-form-popup"
  ) as any;

  callbackFormEl.addEventListener("submit", async (e) => {
    // Prevent default form submission
    e.preventDefault();

    // Read values from input fields
    const nameInputEl = callbackFormEl.querySelector(
      "#name"
    ) as HTMLInputElement;
    const phoneInputEl = callbackFormEl.querySelector(
      "#phone"
    ) as HTMLInputElement;
    const messageInputEl = callbackFormEl.querySelector(
      "#message"
    ) as HTMLInputElement;

    const name = nameInputEl.value?.trim().slice(0, 50);
    const phone = phoneInputEl.value?.trim().slice(0, 20);
    const message = messageInputEl.value?.trim().slice(0, 1000);

    // Validate data - check if name and phone number are provided
    const phoneRegex =
      /^[\+]?[(]?[0-9]{3}[)]?[-\s\.]?[0-9]{3}[-\s\.]?[0-9]{4,6}$/im;

    if (!name) return nameInputEl.focus();
    if (!phone || !phoneRegex.test(phone)) return phoneInputEl.focus();

    const data = {
      name,
      phone,
      message,
    };

    console.log(data);

    const btnElement = callbackFormEl.querySelector(
      "button[type=submit]"
    ) as HTMLButtonElement;

    try {
      // Send data to the netlify backend
      const startTime = Date.now();
      btnElement.innerText = "Đang gửi ...";
      btnElement.disabled = true;
      const response = await fetch("/", {
        method: "POST",
        headers: { "Content-Type": "application/x-www-form-urlencoded" },
        body: new URLSearchParams(data).toString(),
      });

      if (!response.ok) throw new Error("Error sending data to backend.");

      // Show success message with slight delay in case if network speed is too fast
      const timeElapsed = Date.now() - startTime;
      const delay = timeElapsed < 2000 ? 2000 - timeElapsed : 0;

      setTimeout(() => {
        successAlertEl.show(
          "Gửi tin nhắn thành công",
          "Chúng tôi rất mong nhận được hồi âm từ bạn va se goi lai cho ban som nhe."
        );
      }, delay);

      // Reset form
      setTimeout(() => {
        formContainerPopupEl.hide();
        nameInputEl.value = "";
        phoneInputEl.value = "";
        messageInputEl.value = "";
        btnElement.innerText = "Gửi thông tin";
        btnElement.disabled = false;
      }, delay + 1000);
    } catch (error) {
      if (import.meta.env.MODE === "development")
        console.log("Error submitting email to subscription form", error);
      errorAlertEl.show(
        "Gửi tin nhắn không thành công",
        "Rất tiếc, lỗi đã xảy ra, vui lòng thử lại sau."
      );

      console.log(error);
      btnElement.innerText = "Gửi thông tin";
      btnElement.disabled = false;
    }
  });
</script>
