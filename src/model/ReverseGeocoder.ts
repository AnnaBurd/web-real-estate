import type { Land } from "./Land";

// Fetch addresses for the lands from the Geoapify API
// Mutates the lands array
export const loadLandsAddresses = async (lands: Land[], apiUrl: string) => {
  console.log("🌍 ContentfulModel: fetching lands addresses ");

  // 0. Prepare request data
  const inputs = lands
    .filter((land) => land.coords)
    .map((land) => ({
      id: land.slug,
      params: { lat: land.coords![0], lon: land.coords![1] },
    }));

  // Send request (batch of coordinates to addresses)
  // Reference https://apidocs.geoapify.com/samples/batch/batch-call-javascript/

  // 1. Ask Geoapify API to convert coordinates to addresses (takes time, while pending returns 202, when done returns 200)
  let response = await fetch(apiUrl, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      Accept: "application/json",
    },
    body: JSON.stringify({
      api: "/v1/geocode/reverse",
      params: {
        lang: "vi",
      },
      inputs,
    }),
  });

  // 2. Get id of the batch (generated by Geoapify API and allows to check the status of the batch)
  let batchId = "";
  if (response.status === 202) {
    const body = await response.json();
    batchId = body.id;
  }

  // 3. Wait until results are ready
  let attempt = 0;
  while (response.status === 202 && attempt < 10) {
    attempt++;
    console.log(`🌍 Geoapify - waiting for the addresses, attempt #${attempt}`);
    await new Promise((resolve) => setTimeout(resolve, 1000)); // wait a second

    response = await fetch(apiUrl + `&id=${batchId}`);
  }

  // 4. Get the results
  if (response.status !== 200)
    throw new Error(
      `🌍 Geoapify - failed to fetch addresses after ${attempt} attempts: ${response.status}`,
    );

  const jsonResults = await response.json();

  // 5. Add addresses to the lands
  jsonResults.results.forEach((result: any) => {
    const land = lands.find((land) => land.slug === result.id);

    const address = result.result.features[0].properties.formatted;

    const adjustedAddress = (address as string).replace(", Việt Nam", "");

    if (land) land.address = adjustedAddress;
  });

  return lands;
};
