---
import Logo from "../logo/Logo.astro";
import CallButton from "./CallButton.astro";
import ButtonSmall from "../ui/buttons/ButtonSmall.astro";
import NavigationItem from "./NavigationItem.astro";
import NavigationDropdown from "./dropdown/NavigationDropdown.astro";

import { COMPANY_PHONE_NUMBER } from "../../scripts/constants";

interface Props {}

const navigationPages = [
  {
    title: "Trang chủ",
    href: "/",
  },
  {
    title: "Tìm kiếm đất",
    href: "/tim-dat",
  },
  {
    title: "Về chúng tôi",
    href: "/thong-tin",
  },
];

const currentPage = Astro.url.pathname;
const phone = COMPANY_PHONE_NUMBER;
---

<header
  class="fixed top-0 left-0 z-50 w-full py-2 flex flex-row items-center overflow-hidden"
>
  <div class="px-4 md:px-8 lg:px-16 flex-1 loaded-hero-logo">
    <Logo companyTitle="VietLand" className="" />
  </div>

  <ul class="loaded-hero-links xl:flex flex-wrap gap-x-2 hidden">
    {
      navigationPages.map((page) => (
        <NavigationItem href={page.href} isActive={page.href === currentPage}>
          {page.title}
        </NavigationItem>
      ))
    }
  </ul>
  <div
    class="flex xl:px-16 flex-1 justify-end items-center loaded-hero-buttons"
  >
    <div class="hidden xl:block">
      <ButtonSmall id="callback-form-btn">Liên hệ</ButtonSmall>
    </div>
    <div class="hidden sm:block"><CallButton phone={phone} /></div>
    <div
      class="xl:hidden flex flex-col items-center justify-center ml-4 mr-4 lg:mr-16 md:mr-8 relative"
    >
      <NavigationDropdown
        currentPage={currentPage}
        pages={navigationPages}
        phone={phone}
      />
    </div>
  </div>
</header>

<style>
  /* Prevent scrollbar from repositioning page content */
  /* TODO: check if has effect */
  header {
    left: calc(100vw - 100%) !important;
    overflow-x: hidden !important;
  }
</style>

<!-- Functionality of the call back button -->
<script>
  import type { PopUp } from "../../layouts/Popup.astro.0.mts";

  const callbackFormBtn = document.getElementById(
    "callback-form-btn"
  ) as HTMLElement;

  const callbackFormBtnSmall = document.getElementById(
    "callback-form-btn-small"
  ) as HTMLElement;

  const callbackFormPopup = document.getElementById(
    "callback-form-popup"
  ) as PopUp;

  [callbackFormBtn, callbackFormBtnSmall].forEach((btn) =>
    btn.addEventListener("click", () => {
      callbackFormPopup.show();
    })
  );
</script>

<!-- Hide and show navigation bar in header when scrolling past hero section (css) -->
<style is:global lang="sass">
  header[scroll-hide="true"]
    transform: translateY(-50px)
    opacity: 0
    transition: transform .6s ease, opacity .4s ease

  header[scroll-hide="false"]
    transform: translateY(0%)
    opacity: 1
    transition: transform .6s ease, opacity .4s .1s ease
</style>

<!-- Hide and show navigation bar in header when scrolling past first (hero) section (client js) -->
<script>
  import type { DropdownMenu } from "./dropdown/NavigationDropdown.astro.0.mts";
  import isMobileDevice from "../../scripts/isMobileDevice";

  const observeScrollAndToggleNavigation = (
    navigatioElement: HTMLElement,
    navigationDropdownElement: DropdownMenu,
    scrolledElement: HTMLElement,
    contentRootElement: HTMLElement
  ) => {
    // Calculate height margins for intersection observer
    const heightMargin = isMobileDevice() ? 30 : window.innerHeight * 0.27;

    const observerThreshhold = +(
      scrolledElement.getAttribute("data-scroll-hide-section") || 0.99
    );

    const showNavigation = async () => {
      // Check if dropdown menu is open and close it before futher animations
      if (navigationDropdownElement.isOpened())
        await navigationDropdownElement.hide();

      // Trigger show animation, as defined in css
      navigatioElement.setAttribute("scroll-hide", "false");

      // Clear applyed styles after animation (otherwise transform(0) meddles with layout)
      setTimeout(() => {
        navigatioElement.removeAttribute("scroll-hide");
      }, 550);
    };

    const hideNavigation = () => {
      // Trigger hide animation, as defined in css
      navigatioElement.setAttribute("scroll-hide", "true");
    };

    const handleIntersect: IntersectionObserverCallback = (entries) => {
      entries.forEach(async (entry) => {
        if (entry.isIntersecting) {
          showNavigation();
        } else {
          hideNavigation();
        }
      });
    };

    new IntersectionObserver(handleIntersect, {
      root: contentRootElement,
      rootMargin: `${heightMargin.toFixed(0)}px`,
      threshold: [observerThreshhold],
    }).observe(scrolledElement);
  };

  // Query relevant html elements
  const headerEl: HTMLElement | null = document.querySelector("header");
  const rootContainer: HTMLElement | null =
    document.querySelector(".main-content");
  const dropdown: DropdownMenu | null =
    document.querySelector(".hamburger-menu");
  const scrollHideSectionEl: HTMLElement | null = document.querySelector(
    "[data-scroll-hide-section]"
  );

  // If all elements are present, start observing
  if (scrollHideSectionEl && headerEl && rootContainer && dropdown)
    observeScrollAndToggleNavigation(
      headerEl,
      dropdown,
      scrollHideSectionEl,
      rootContainer
    );
</script>
