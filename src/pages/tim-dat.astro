---
import Layout from "../layouts/Layout.astro";

import dataModel from "../model/ContentfulModel";
import MapView from "../components/map/MapView.astro";
import LandSearchApp from "../components/sections/land-search/LandSearchApp";
import Popup from "../components/map/PopupTemplate.astro";

// Load all (there will be 20 lands at max so no need for pagination) lands data
const lands = await dataModel.getAllLands();

const maxLandPrice = Math.max(...lands.map((land) => land.price!));
const maxLandSize = Math.max(...lands.map((land) => land.area!));

const title = "VietLand - tìm mảnh đất tốt đẹp nhất";
---

<Layout title={title} currentPage={"/tim-dat"}>
  <div class="flex">
    <div
      class="pt-14 pb-6 h-screen bg-gradient-to-t from-[--color-secondary-lighter] flex flex-1"
    >
      <LandSearchApp
        client:only="react"
        preloadedLands={lands}
        maxPrice={maxLandPrice}
        maxSize={maxLandSize}
      />
    </div>

    <div
      class="bg-white shadow-sm h-screen w-[37vw] overflow-hidden"
      id="resize-container"
    >
      <MapView
        locations={lands
          .filter((land) => land.coords)
          .map((land) => ({
            title: land.title || "Đất trống",
            coordinates: {
              lat: land.coords ? land.coords[0] : 0,
              lng: land.coords ? land.coords[1] : 0,
            },
          }))}
        fullHeight={true}
      />
    </div>
  </div>
</Layout>

<script>
  let resizeHandle: HTMLElement | null;
  let resizeContainer: HTMLElement | null;
  let mapContainer: HTMLElement | null;
  const position = {
    startX: 0,
    startY: 0,
  };

  setTimeout(() => {
    resizeHandle = document.querySelector("#resize-handle");
    resizeContainer = document.querySelector("#resize-container");
    mapContainer = document.querySelector("map-view");

    if (resizeHandle) {
      resizeHandle.addEventListener("mousedown", handleStartDragging);
    }

    console.log("🤔", resizeHandle, resizeContainer);
  }, 1500);

  const handleStartDragging = (e: MouseEvent) => {
    e.preventDefault();

    console.log("dragMouseDownHandler", e);

    position.startX = e.clientX;
    position.startY = e.clientY;

    document.addEventListener("mousemove", handleDragging);
    document.addEventListener("mouseup", handleEndOfDragging);
  };

  const handleDragging = (e: MouseEvent) => {
    console.log("handleDragging", e);
    e.preventDefault();

    const deltaX = position.startX - e.clientX;
    const deltaY = position.startY - e.clientY;

    position.startX = e.clientX;
    position.startY = e.clientY;

    resizeContainer!.style.width = `${resizeContainer!.offsetWidth + deltaX}px`;
    (mapContainer as any).resizeHandler();
  };

  const handleEndOfDragging = (e: MouseEvent) => {
    console.log("handleEndOfDragging", e);

    document.removeEventListener("mousemove", handleDragging);
    document.removeEventListener("mouseup", handleEndOfDragging);
  };
</script>
