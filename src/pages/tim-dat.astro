---
import Layout from "../layouts/Layout.astro";
import MapView from "../components/map/MapView.astro";
import LandSearchApp from "../components/sections/land-search/LandSearchApp";

import dataModel from "../model/ContentfulModel";
import ScrollButton from "../components/ui/buttons/ScrollButton.astro";

// Load all lands data (there will be 20 lands at max so no need for pagination)
const lands = await dataModel.getAllLands();

// Calculate max price and size to configure search filter limits
const maxLandPrice = Math.max(...lands.map((land) => land.price!));
const maxLandSize = Math.max(...lands.map((land) => land.area!));

const title = "VietLand - tìm mảnh đất tốt đẹp nhất";
---

<Layout pageTitle={title}>
  <div
    class="flex min-h-screen"
    data-scroll-hide-section
    id="dynamic-lands-search"
  >
    <div
      class="flex flex-1 flex-col bg-gradient-to-t from-[--color-secondary-lighter] pt-10 md:flex-row lg:h-screen"
    >
      <LandSearchApp
        client:only="react"
        preloadedLands={lands}
        maxPrice={maxLandPrice}
        maxSize={maxLandSize}
      />

      <div
        class="scroll-btn-wrapper z-50 opacity-0 transition-opacity duration-1000 md:hidden"
      >
        <ScrollButton
          id="scroll-btn"
          ariaLabel="Go up to the beginning"
          direction="up"
          destinationElementId="dynamic-lands-search"
          className="  !fixed bottom-4  "
        />
      </div>
    </div>

    <div
      class="z-0 h-screen w-[37vw] overflow-hidden bg-white shadow-sm [--top-height:6rem] max-lg:invisible max-lg:absolute max-lg:mt-[var(--top-height)] max-lg:h-[calc(100vh-var(--top-height))] max-lg:opacity-0 max-md:w-full md:max-lg:left-56 md:max-lg:w-[calc(100vw-14rem)] lg:static lg:block"
      id="resizable-map-wrapper"
    >
      <MapView
        locations={lands
          .filter((land) => land.coords)
          .map((land) => ({
            title: land.title || "Đất trống",
            coordinates: {
              lat: land.coords ? land.coords[0] : 0,
              lng: land.coords ? land.coords[1] : 0,
            },
          }))}
        fullHeight={true}
      />
    </div>
  </div>
</Layout>

<!-- Hide and reveal scroll button -->
<script>
  import isMobileDevice from "../scripts/isMobileDevice";

  let isVisibleScrollBtn = false; // Keep state to follow scroll direction
  let isThrottling = false;

  let scrollBtnWrapper: HTMLElement | null;
  let scrollSection: HTMLElement | null;

  const queryHTMLElements = () => {
    scrollBtnWrapper = document.querySelector(".scroll-btn-wrapper");
    scrollSection = document.querySelector(".main-content");
  };

  const setScrollBtnVisibility = (
    btnWrapper: HTMLElement,
    isVisible: boolean,
  ) => {
    if (isVisibleScrollBtn === isVisible) return; // No need to change visibility

    btnWrapper.classList.toggle("opacity-0");
    btnWrapper.classList.toggle("opacity-100");

    isVisibleScrollBtn = isVisible;
  };

  const revealScrollBtnOnScrollDown = (btnWrapper: HTMLElement) => {
    // Throttle scroll event handling to avoid performance issues
    if (isThrottling) return;

    setTimeout(() => {
      isThrottling = false;
    }, 500); // Check scroll position with at least 500ms interval

    isThrottling = true;

    // Hide scroll button when scrolling up, and show when scrolling down past 1200px
    const scrollPosition = scrollSection!.scrollTop;
    // Use timeout to avoid scroll event handling delays
    setTimeout(() => {
      if (scrollPosition > 1200) {
        setScrollBtnVisibility(btnWrapper, true);
      } else {
        setScrollBtnVisibility(btnWrapper, false);
      }
    }, 0);
  };

  setTimeout(() => {
    queryHTMLElements();

    if (!scrollBtnWrapper || !scrollSection || !isMobileDevice()) return;

    scrollSection.addEventListener(
      "scroll",
      () => {
        revealScrollBtnOnScrollDown(scrollBtnWrapper!);
      },
      { passive: true },
    );
  }, 3000); // Query elements and set up event listener later, after loading page and react app
</script>
