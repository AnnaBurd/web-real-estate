---
import HamburgerButton from "./HamburgerButton.astro";
import NavigationDropdownItem from "./NavigationDropdownItem.astro";

interface Page {
  title: string;
  href: string;
}

interface Props {
  currentPage: string;
  pages: Page[];
}

const { currentPage, pages } = Astro.props;
---

<HamburgerButton />
<dropdown-menu
  id="hamburger-menu"
  class="hamburger-menu hamburger-menu--closed fixed bg-white w-screen top-0 right-0 -z-10 pt-14 pb-1.5 list-none"
>
  {
    pages.map((page) => (
      <NavigationDropdownItem
        href={page.href}
        isActive={page.href === currentPage}
      >
        {page.title}
      </NavigationDropdownItem>
    ))
  }
</dropdown-menu>

<!-- Style menu in open and closed states, with transition in between -->
<style>
  .hamburger-menu {
    transition: transform 0.5s cubic-bezier(0.77, 0.2, 0.05, 1);
    transform: translateY(0%);
  }

  .hamburger-menu--closed {
    visibility: hidden;
    transform: translateY(-100%);
    transition:
      transform 0.3s cubic-bezier(0.77, 0.2, 0.05, 1),
      visibility 0s 0.3s;
  }
</style>

<!-- Handle menu opening and closing -->
<script>
  class DropdownMenu extends HTMLElement {
    private isOpen: boolean = false;
    private button: HTMLElement;

    constructor() {
      super();

      this.button = document.querySelector(".hamburger-btn") as HTMLElement;
    }

    async hide() {
      if (!this.isOpen) return;

      this.isOpen = false;
      this.button.setAttribute("data-open", "false");
      this.classList.add("hamburger-menu--closed");

      await new Promise((resolve) => setTimeout(resolve, 200));
    }
    open() {
      if (this.isOpen) return;

      this.isOpen = true;
      this.button.setAttribute("data-open", "true");
      this.classList.remove("hamburger-menu--closed");
    }

    toggle() {
      this.isOpen ? this.hide() : this.open();
    }

    isOpened() {
      return this.isOpen;
    }
  }

  customElements.define("dropdown-menu", DropdownMenu);
</script>
