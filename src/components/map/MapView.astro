---
import type { LandLocation } from "./MapView.astro.0.mts";

type Props = {
  title?: string;
  locations: LandLocation[];
  fullHeight?: boolean;
};

const { locations, title, fullHeight } = Astro.props;
---

<!-- Create custom web component -->
<map-view
  data-locations={JSON.stringify(locations)}
  data-title={title}
  fullheight={fullHeight}></map-view>

<!-- Override default styles of the Leaflet Map -->
<style is:global lang="sass">
  .leaflet-bottom // Move up bottom controls
    top: max(calc(50% - 30px), 60px)

  map-view[fullheight="true"] // Adjust controls position
    .leaflet-top
      top: max(calc(50% - 10rem), 3rem)
    .leaflet-bottom
      top: max(calc(50% - 30px), 60px)

  .leaflet-control // Style zoom controls and btn
    border: none !important
    border-radius: .7rem !important
    overflow: hidden
    cursor: pointer !important
    @apply shadow-sm #{!important}

  .leaflet-control-zoom-in,
  .leaflet-control-zoom-out,
  .leaflet-control-button
    background-color: #ffffff !important
    display: flex !important
    justify-content: center
    align-items: center
    &:hover
      filter: brightness(0.9)

  .leaflet-control-icon
    svg
      fill: var(--color-secondary-darker)

  .map-marker-icon
    fill: var(--color-secondary)
</style>

<style></style>

<!-- Switch styles between minimized and fullscreen mode -->
<style lang="sass" is:global>
  map-view
    display: block
    width: 100%
    height: 100%

    .leaflet-control-icon
      .icon-full
        display: none
      .icon-small
        display: block

  map-view[fullscreen]
    z-index: 1000
    position: fixed !important
    top: 0
    left: 0
    width: 100vw
    height: 100vh

    // Adjust controls position in fullscreen mode
    // TODO: check on mobile
    .leaflet-top
      right: 5px // Compensate for the scrollbar space
      top: max(calc(50% - 10rem), 3rem)

    // TODO: check on mobile
    .leaflet-bottom
      right: 5px // Compensate for the scrollbar space
      top: max(calc(50% - 30px), 60px)

    .leaflet-control-button
      background-color: var(--color-secondary) !important

    .leaflet-control-icon
      .icon-small
        display: none
      .icon-full
        display: block
        fill: white
</style>

<!-- Instantiate Leaflet Map using parameters from data attributes hidden in html -->
<script>
  import L from "leaflet";
  import "leaflet/dist/leaflet.css";

  const defaultLeafletMapOptions = {
    attributionControl: false,
    zoomControl: false,
    scrollWheelZoom: false,
    minZoom: 6,
    maxZoom: 18,
  };

  const defaultLeafletPopupOptions = {
    autoClose: false,
    closeOnClick: false,
    closeOnEscapeKey: false,
    closeButton: false,
    autoPan: true,
    riseOnHover: true,
    className: "map-popup",
  };

  export type LandLocation = {
    title: string;
    coordinates: {
      lat: number;
      lng: number;
    };
  };

  class MapView extends HTMLElement {
    #locations: LandLocation[] = []; // List of points on the map
    #center: L.LatLngTuple = [0, 0]; // Center of the map
    #leafletMap: L.Map | null = null; // Leaflet Map instance
    #leafletMarkers: L.Marker[] = []; // Leaflet Markers instances

    constructor() {
      super();

      // 1. Get locations coordinates from data attributes in html markup
      const locations = this.dataset.locations;

      if (locations) {
        this.#locations.push(...JSON.parse(locations));

        this.updateCenterPointValue();
      }

      // 2. Init Leaflet Map:
      // Load and position map instance
      this.#leafletMap = L.map(this, defaultLeafletMapOptions).setView(
        this.#center,
        14
      );

      // Load tiles from third-party api
      L.tileLayer(
        `https://api.maptiler.com/maps/topo-v2/{z}/{x}/{y}.png?key=${
          import.meta.env.PUBLIC_MAPTILES_KEY
        }`
      ).addTo(this.#leafletMap);

      // Another tile option
      // L.tileLayer(
      //   `https://tile.thunderforest.com/atlas/{z}/{x}/{y}.png?apikey=${
      //     import.meta.env.PUBLIC_MAPTILES_KEY
      //   }`
      // ).addTo(this.#leafletMap);

      // Add Zoom controls and replace default zoom icons
      L.control.zoom({ position: "bottomright" }).addTo(this.#leafletMap);
      const zoomInButton = document.querySelector(
        ".leaflet-control-zoom-in"
      ) as HTMLElement;
      const zoomOutButton = document.querySelector(
        ".leaflet-control-zoom-out"
      ) as HTMLElement;

      zoomInButton.innerHTML = `<span class="leaflet-control-icon"><svg xmlns="http://www.w3.org/2000/svg" height="19" viewBox="0 96 960 960" width="19"><path d="M440 856V616H200v-80h240V296h80v240h240v80H520v240h-80Z"/></svg></span>`;
      zoomOutButton.innerHTML = `<span class="leaflet-control-icon"><svg xmlns="http://www.w3.org/2000/svg" height="19" viewBox="0 96 960 960" width="19"><path d="M200 616v-80h560v80H200Z"/></svg></svg></span>`;

      // Add fullscreen button control
      const handleFullscreenMap = () => {
        this.toggleAttribute("fullscreen");
        this.#leafletMap?.invalidateSize();
      };

      (L.Control as any).Button = L.Control.extend({
        options: {
          position: "topright",
        },
        onAdd: () => {
          const container = L.DomUtil.create(
            "div",
            "leaflet-bar leaflet-control leaflet-control-custom"
          );
          let button = L.DomUtil.create(
            "a",
            "leaflet-control-button",
            container
          );

          button.innerHTML = `<span class="leaflet-control-icon"><svg class="icon-small" xmlns="http://www.w3.org/2000/svg" height="24" viewBox="0 96 960 960" width="24"><path d="M120 936V696h80v104l124-124 56 56-124 124h104v80H120Zm516-460-56-56 124-124H600v-80h240v240h-80V352L636 476Z"/></svg><svg class="icon-full" xmlns="http://www.w3.org/2000/svg" height="20" viewBox="0 96 960 960" width="20"><path d="m136 976-56-56 264-264H160v-80h320v320h-80V712L136 976Zm344-400V256h80v184l264-264 56 56-264 264h184v80H480Z"/></svg></span>`;

          L.DomEvent.disableClickPropagation(button);
          container.onclick = handleFullscreenMap;
          return container;
        },

        onRemove: () => {},
      });

      new (L.Control as any).Button().addTo(this.#leafletMap);

      // Add markers with land locations
      // this.#locations.forEach((location) => this.addMarker(location)); // TODO:

      // this.#locations.forEach((location) => this.addPopupMarker(location));

      // Fit map to markers bounds
      if (this.#locations.length > 1) {
        const bounds = L.latLngBounds(
          this.#locations.map((location) => location.coordinates)
        );
        this.#leafletMap.fitBounds(bounds);
      }

      // setTimeout(() => {
      //   this.removePopupMarker(this.#locations[0].title);
      //   this.removePopupMarkers([
      //     this.#locations[1].title,
      //     this.#locations[2].title,
      //   ]);
      // }, 2000);
    }

    fitMapToMarkers() {
      if (this.#leafletMarkers.length > 1) {
        const bounds = L.latLngBounds(
          this.#leafletMarkers.map((marker) => marker.getLatLng())
        );
        this.#leafletMap?.fitBounds(bounds);
      }
    }

    updateCenterPointValue() {
      const averageLat =
        this.#locations.reduce(
          (acc, location) => acc + location.coordinates.lat,
          0
        ) / this.#locations.length;
      const averageLng =
        this.#locations.reduce(
          (acc, location) => acc + location.coordinates.lng,
          0
        ) / this.#locations.length;

      this.#center = [averageLat, averageLng];
    }

    addMarker(location: LandLocation) {
      const leafletMarkerSvgTemplate = `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-8 h-8 map-marker-icon">
  <path fill-rule="evenodd" d="M11.54 22.351l.07.04.028.016a.76.76 0 00.723 0l.028-.015.071-.041a16.975 16.975 0 001.144-.742 19.58 19.58 0 002.683-2.282c1.944-1.99 3.963-4.98 3.963-8.827a8.25 8.25 0 00-16.5 0c0 3.846 2.02 6.837 3.963 8.827a19.58 19.58 0 002.682 2.282 16.975 16.975 0 001.145.742zM12 13.5a3 3 0 100-6 3 3 0 000 6z" clip-rule="evenodd" />
</svg>
`;

      const markerIcon = L.divIcon({
        className: "map-marker",
        html: leafletMarkerSvgTemplate,
        iconSize: [32, 32],
        iconAnchor: [16, 32],
      });

      L.marker(location.coordinates, {
        title: location.title,
        icon: markerIcon,
      }).addTo(this.#leafletMap!);
    }

    addPopupMarker(location: LandLocation) {
      const svgIconTemplate = `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-8 h-8 map-marker-icon">
  <path fill-rule="evenodd" d="M11.54 22.351l.07.04.028.016a.76.76 0 00.723 0l.028-.015.071-.041a16.975 16.975 0 001.144-.742 19.58 19.58 0 002.683-2.282c1.944-1.99 3.963-4.98 3.963-8.827a8.25 8.25 0 00-16.5 0c0 3.846 2.02 6.837 3.963 8.827a19.58 19.58 0 002.682 2.282 16.975 16.975 0 001.145.742zM12 13.5a3 3 0 100-6 3 3 0 000 6z" clip-rule="evenodd" />
</svg>
`;

      const markerIcon = L.divIcon({
        className: "map-marker",
        html: svgIconTemplate,
        iconSize: [32, 32],
        iconAnchor: [16, 32],
      });

      const marker = L.marker(location.coordinates, {
        title: location.title,
        icon: markerIcon,
      }).addTo(this.#leafletMap!);

      const popup = L.popup(defaultLeafletPopupOptions).setContent(
        `<h3 class="text-xs font-semibold mb-10">${location.title}</h3>`
      );

      marker.bindPopup(popup);

      // console.log("added marker", marker);

      this.#leafletMarkers.push(marker);

      // console.log("markers", this.#leafletMarkers);
    }

    removePopupMarker(markerTitle: string) {
      const markerIndex = this.#leafletMarkers.findIndex(
        (marker) => marker.options.title === markerTitle
      );

      if (markerIndex !== -1) {
        this.#leafletMarkers[markerIndex].remove();
        this.#leafletMarkers.splice(markerIndex, 1);
      }
    }

    removePopupMarkers(markerTitles: string[]) {
      markerTitles.forEach((title) => this.removePopupMarker(title));
    }

    rerenderPopupMarkers(locations: LandLocation[]) {
      this.#leafletMarkers.forEach((marker) => marker.remove());

      this.#leafletMarkers = [];

      locations.forEach((location) => this.addPopupMarker(location));
    }

    focusOnMarker(markerTitle: string) {
      console.log("focusOnMarker", markerTitle);

      const markerIndex = this.#leafletMarkers.findIndex(
        (marker) => marker.options.title === markerTitle
      );

      if (markerIndex !== -1) {
        this.#leafletMarkers.forEach((marker) => marker.closePopup());

        this.#leafletMarkers[markerIndex].openPopup();

        this.#leafletMap?.panTo(this.#leafletMarkers[markerIndex].getLatLng());
      }
    }

    resizeHandler() {
      this.#leafletMap?.invalidateSize();
    }
  }

  // Tell the browser to use MapView class for <map-view> elements.
  customElements.define("map-view", MapView);
</script>
