---
import Logo from "../logo/Logo.astro";
import CallButton from "./CallButton.astro";
import ButtonSmall from "../ui/buttons/ButtonSmall.astro";
import NavigationItem from "./NavigationItem.astro";
import NavigationDropdown from "./dropdown/NavigationDropdown.astro";

interface Props {
  currentPage: string;
  phone: string;
}

const { currentPage, phone } = Astro.props;

const navigationPages = [
  {
    title: "Trang chủ",
    href: "/",
  },
  {
    title: "Tìm kiếm đất",
    href: "/tim-dat",
  },
  // TODO: button to switch list / map on one page
  // {
  //   title: "Xem trên bản đồ",
  //   href: "/xem-ban-do",
  // },
  {
    title: "Thông tin liên lạc",
    href: "/thong-tin",
  },
];
---

<header
  class="fixed top-0 left-0 z-50 w-full py-2 flex flex-row items-center overflow-hidden"
>
  <div class="px-4 md:px-8 lg:px-16 flex-1 loaded-hero-logo">
    <Logo companyTitle="VietLand" className="" />
  </div>

  <ul class="loaded-hero-links xl:flex flex-wrap gap-x-2 hidden">
    {
      navigationPages.map((page) => (
        <NavigationItem href={page.href} isActive={page.href === currentPage}>
          {page.title}
        </NavigationItem>
      ))
    }
  </ul>
  <div
    class="flex xl:px-16 flex-1 justify-end items-center loaded-hero-buttons"
  >
    <div class="hidden xl:block">
      <ButtonSmall id="callback-form-btn">Liên hệ</ButtonSmall>
    </div>
    <div class="hidden sm:block"><CallButton phone={phone} /></div>
    <div
      class="xl:hidden flex flex-col items-center justify-center ml-4 mr-4 lg:mr-16 md:mr-8 relative"
    >
      <NavigationDropdown
        currentPage={currentPage}
        pages={navigationPages}
        phone={phone}
      />
    </div>
  </div>
</header>

<style>
  /* Prevent scrollbar from repositioning page content */
  /* TODO: check if has effect */
  header {
    left: calc(100vw - 100%) !important;
    overflow-x: hidden !important;
  }
</style>

<!-- Functionality of the call back button -->
<script>
  const callbackFormBtn = document.getElementById(
    "callback-form-btn"
  ) as HTMLElement;

  const callbackFormBtnSmall = document.getElementById(
    "callback-form-btn-small"
  ) as HTMLElement;

  // TODO: later research the correct way to do TS + web components + astro typing
  const callbackFormPopup: any = document.getElementById("callback-form-popup");

  [callbackFormBtn, callbackFormBtnSmall].forEach((btn) =>
    btn.addEventListener("click", () => {
      callbackFormPopup.show();
    })
  );
</script>

<!-- Hide and show navigation bar in header when scrolling past hero section (css) -->
<style is:global lang="sass">
  header[scroll-hide="true"]
    transform: translateY(-50px)
    opacity: 0
    transition: transform .6s ease, opacity .4s ease

  header[scroll-hide="false"]
    transform: translateY(0%)
    opacity: 1
    transition: transform .6s ease, opacity .4s .1s ease
</style>

<!-- Hide and show navigation bar in header when scrolling past first (hero) section (client js) -->
<script>
  import isMobileDevice from "../../scripts/isMobileDevice";

  const headerEl = document.querySelector("header") as HTMLElement;
  const rootContainer = document.querySelector(".main-content") as HTMLElement;
  const dropdown = document.querySelector(".hamburger-menu")! as any;

  function createObserver() {
    let observer;

    const height = isMobileDevice() ? 30 : window.innerHeight * 0.27;

    let options = {
      root: rootContainer,
      rootMargin: `${height.toFixed(0)}px`,
      threshold: [0.99],
    };

    function handleIntersect(entries: any, observer: any) {
      entries.forEach(async (entry: any) => {
        if (entry.isIntersecting) {
          // Close dropdown menu if it was open
          if (dropdown.isOpened()) {
            await dropdown.hide();
          }

          headerEl.setAttribute("scroll-hide", "false");

          // Clear styles after animation (otherwise transform(0) meddles with layout)

          setTimeout(() => {
            headerEl.removeAttribute("scroll-hide");
          }, 550);
        } else {
          headerEl.setAttribute("scroll-hide", "true");
        }
      });
    }

    observer = new IntersectionObserver(handleIntersect, options);
    observer.observe(document.querySelector("section") as HTMLElement);
    // TODO: fix
  }

  // createObserver();
</script>
